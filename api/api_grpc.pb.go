// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DesktopAutoscalerService_VMWareCreate_FullMethodName               = "/api.DesktopAutoscalerService/VMWareCreate"
	DesktopAutoscalerService_VMWareDelete_FullMethodName               = "/api.DesktopAutoscalerService/VMWareDelete"
	DesktopAutoscalerService_VMWarePowerOn_FullMethodName              = "/api.DesktopAutoscalerService/VMWarePowerOn"
	DesktopAutoscalerService_VMWarePowerOff_FullMethodName             = "/api.DesktopAutoscalerService/VMWarePowerOff"
	DesktopAutoscalerService_VMWarePowerState_FullMethodName           = "/api.DesktopAutoscalerService/VMWarePowerState"
	DesktopAutoscalerService_VMWareShutdownGuest_FullMethodName        = "/api.DesktopAutoscalerService/VMWareShutdownGuest"
	DesktopAutoscalerService_VMWareStatus_FullMethodName               = "/api.DesktopAutoscalerService/VMWareStatus"
	DesktopAutoscalerService_VMWareWaitForIP_FullMethodName            = "/api.DesktopAutoscalerService/VMWareWaitForIP"
	DesktopAutoscalerService_VMWareWaitForToolsRunning_FullMethodName  = "/api.DesktopAutoscalerService/VMWareWaitForToolsRunning"
	DesktopAutoscalerService_VMWareSetAutoStart_FullMethodName         = "/api.DesktopAutoscalerService/VMWareSetAutoStart"
	DesktopAutoscalerService_VMWareVirtualMachineByName_FullMethodName = "/api.DesktopAutoscalerService/VMWareVirtualMachineByName"
	DesktopAutoscalerService_VMWareVirtualMachineByUUID_FullMethodName = "/api.DesktopAutoscalerService/VMWareVirtualMachineByUUID"
	DesktopAutoscalerService_VMWareListVirtualMachines_FullMethodName  = "/api.DesktopAutoscalerService/VMWareListVirtualMachines"
	DesktopAutoscalerService_VMWareListNetwork_FullMethodName          = "/api.DesktopAutoscalerService/VMWareListNetwork"
	DesktopAutoscalerService_HostListInstance_FullMethodName           = "/api.DesktopAutoscalerService/HostListInstance"
	DesktopAutoscalerService_HostStartInstance_FullMethodName          = "/api.DesktopAutoscalerService/HostStartInstance"
	DesktopAutoscalerService_HostStopInstance_FullMethodName           = "/api.DesktopAutoscalerService/HostStopInstance"
	DesktopAutoscalerService_HostDeleteInstance_FullMethodName         = "/api.DesktopAutoscalerService/HostDeleteInstance"
	DesktopAutoscalerService_HostInfoInstance_FullMethodName           = "/api.DesktopAutoscalerService/HostInfoInstance"
	DesktopAutoscalerService_HostCreateInstance_FullMethodName         = "/api.DesktopAutoscalerService/HostCreateInstance"
)

// DesktopAutoscalerServiceClient is the client API for DesktopAutoscalerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DesktopAutoscalerServiceClient interface {
	VMWareCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	VMWareDelete(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	VMWarePowerOn(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*PowerOnResponse, error)
	VMWarePowerOff(ctx context.Context, in *PowerOffRequest, opts ...grpc.CallOption) (*PowerOffResponse, error)
	VMWarePowerState(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*PowerStateResponse, error)
	VMWareShutdownGuest(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*ShutdownGuestResponse, error)
	VMWareStatus(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	VMWareWaitForIP(ctx context.Context, in *WaitForIPRequest, opts ...grpc.CallOption) (*WaitForIPResponse, error)
	VMWareWaitForToolsRunning(ctx context.Context, in *WaitForToolsRunningRequest, opts ...grpc.CallOption) (*WaitForToolsRunningResponse, error)
	VMWareSetAutoStart(ctx context.Context, in *AutoStartRequest, opts ...grpc.CallOption) (*AutoStartResponse, error)
	VMWareVirtualMachineByName(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachineResponse, error)
	VMWareVirtualMachineByUUID(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachineResponse, error)
	VMWareListVirtualMachines(ctx context.Context, in *VirtualMachinesRequest, opts ...grpc.CallOption) (*VirtualMachinesResponse, error)
	VMWareListNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error)
	HostListInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
	HostStartInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
	HostStopInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
	HostDeleteInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
	HostInfoInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
	HostCreateInstance(ctx context.Context, in *HostCreateInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error)
}

type desktopAutoscalerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDesktopAutoscalerServiceClient(cc grpc.ClientConnInterface) DesktopAutoscalerServiceClient {
	return &desktopAutoscalerServiceClient{cc}
}

func (c *desktopAutoscalerServiceClient) VMWareCreate(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareDelete(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWarePowerOn(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*PowerOnResponse, error) {
	out := new(PowerOnResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWarePowerOn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWarePowerOff(ctx context.Context, in *PowerOffRequest, opts ...grpc.CallOption) (*PowerOffResponse, error) {
	out := new(PowerOffResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWarePowerOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWarePowerState(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*PowerStateResponse, error) {
	out := new(PowerStateResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWarePowerState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareShutdownGuest(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*ShutdownGuestResponse, error) {
	out := new(ShutdownGuestResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareShutdownGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareStatus(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareWaitForIP(ctx context.Context, in *WaitForIPRequest, opts ...grpc.CallOption) (*WaitForIPResponse, error) {
	out := new(WaitForIPResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareWaitForIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareWaitForToolsRunning(ctx context.Context, in *WaitForToolsRunningRequest, opts ...grpc.CallOption) (*WaitForToolsRunningResponse, error) {
	out := new(WaitForToolsRunningResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareWaitForToolsRunning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareSetAutoStart(ctx context.Context, in *AutoStartRequest, opts ...grpc.CallOption) (*AutoStartResponse, error) {
	out := new(AutoStartResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareSetAutoStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareVirtualMachineByName(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachineResponse, error) {
	out := new(VirtualMachineResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareVirtualMachineByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareVirtualMachineByUUID(ctx context.Context, in *VirtualMachineRequest, opts ...grpc.CallOption) (*VirtualMachineResponse, error) {
	out := new(VirtualMachineResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareVirtualMachineByUUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareListVirtualMachines(ctx context.Context, in *VirtualMachinesRequest, opts ...grpc.CallOption) (*VirtualMachinesResponse, error) {
	out := new(VirtualMachinesResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareListVirtualMachines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) VMWareListNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error) {
	out := new(NetworkResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_VMWareListNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostListInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostListInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostStartInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostStartInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostStopInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostStopInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostDeleteInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostDeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostInfoInstance(ctx context.Context, in *HostInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostInfoInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *desktopAutoscalerServiceClient) HostCreateInstance(ctx context.Context, in *HostCreateInstanceRequest, opts ...grpc.CallOption) (*HostInstanceResponse, error) {
	out := new(HostInstanceResponse)
	err := c.cc.Invoke(ctx, DesktopAutoscalerService_HostCreateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DesktopAutoscalerServiceServer is the server API for DesktopAutoscalerService service.
// All implementations must embed UnimplementedDesktopAutoscalerServiceServer
// for forward compatibility
type DesktopAutoscalerServiceServer interface {
	VMWareCreate(context.Context, *CreateRequest) (*CreateResponse, error)
	VMWareDelete(context.Context, *VirtualMachineRequest) (*DeleteResponse, error)
	VMWarePowerOn(context.Context, *VirtualMachineRequest) (*PowerOnResponse, error)
	VMWarePowerOff(context.Context, *PowerOffRequest) (*PowerOffResponse, error)
	VMWarePowerState(context.Context, *VirtualMachineRequest) (*PowerStateResponse, error)
	VMWareShutdownGuest(context.Context, *VirtualMachineRequest) (*ShutdownGuestResponse, error)
	VMWareStatus(context.Context, *VirtualMachineRequest) (*StatusResponse, error)
	VMWareWaitForIP(context.Context, *WaitForIPRequest) (*WaitForIPResponse, error)
	VMWareWaitForToolsRunning(context.Context, *WaitForToolsRunningRequest) (*WaitForToolsRunningResponse, error)
	VMWareSetAutoStart(context.Context, *AutoStartRequest) (*AutoStartResponse, error)
	VMWareVirtualMachineByName(context.Context, *VirtualMachineRequest) (*VirtualMachineResponse, error)
	VMWareVirtualMachineByUUID(context.Context, *VirtualMachineRequest) (*VirtualMachineResponse, error)
	VMWareListVirtualMachines(context.Context, *VirtualMachinesRequest) (*VirtualMachinesResponse, error)
	VMWareListNetwork(context.Context, *NetworkRequest) (*NetworkResponse, error)
	HostListInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error)
	HostStartInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error)
	HostStopInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error)
	HostDeleteInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error)
	HostInfoInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error)
	HostCreateInstance(context.Context, *HostCreateInstanceRequest) (*HostInstanceResponse, error)
	mustEmbedUnimplementedDesktopAutoscalerServiceServer()
}

// UnimplementedDesktopAutoscalerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDesktopAutoscalerServiceServer struct {
}

func (UnimplementedDesktopAutoscalerServiceServer) VMWareCreate(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareCreate not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareDelete(context.Context, *VirtualMachineRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareDelete not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWarePowerOn(context.Context, *VirtualMachineRequest) (*PowerOnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWarePowerOn not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWarePowerOff(context.Context, *PowerOffRequest) (*PowerOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWarePowerOff not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWarePowerState(context.Context, *VirtualMachineRequest) (*PowerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWarePowerState not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareShutdownGuest(context.Context, *VirtualMachineRequest) (*ShutdownGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareShutdownGuest not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareStatus(context.Context, *VirtualMachineRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareStatus not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareWaitForIP(context.Context, *WaitForIPRequest) (*WaitForIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareWaitForIP not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareWaitForToolsRunning(context.Context, *WaitForToolsRunningRequest) (*WaitForToolsRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareWaitForToolsRunning not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareSetAutoStart(context.Context, *AutoStartRequest) (*AutoStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareSetAutoStart not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareVirtualMachineByName(context.Context, *VirtualMachineRequest) (*VirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareVirtualMachineByName not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareVirtualMachineByUUID(context.Context, *VirtualMachineRequest) (*VirtualMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareVirtualMachineByUUID not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareListVirtualMachines(context.Context, *VirtualMachinesRequest) (*VirtualMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareListVirtualMachines not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) VMWareListNetwork(context.Context, *NetworkRequest) (*NetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VMWareListNetwork not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostListInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostListInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostStartInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostStartInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostStopInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostStopInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostDeleteInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostDeleteInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostInfoInstance(context.Context, *HostInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostInfoInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) HostCreateInstance(context.Context, *HostCreateInstanceRequest) (*HostInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostCreateInstance not implemented")
}
func (UnimplementedDesktopAutoscalerServiceServer) mustEmbedUnimplementedDesktopAutoscalerServiceServer() {
}

// UnsafeDesktopAutoscalerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DesktopAutoscalerServiceServer will
// result in compilation errors.
type UnsafeDesktopAutoscalerServiceServer interface {
	mustEmbedUnimplementedDesktopAutoscalerServiceServer()
}

func RegisterDesktopAutoscalerServiceServer(s grpc.ServiceRegistrar, srv DesktopAutoscalerServiceServer) {
	s.RegisterService(&DesktopAutoscalerService_ServiceDesc, srv)
}

func _DesktopAutoscalerService_VMWareCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareCreate(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareDelete(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWarePowerOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWarePowerOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerOn(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWarePowerOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWarePowerOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerOff(ctx, req.(*PowerOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWarePowerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWarePowerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWarePowerState(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareShutdownGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareShutdownGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareShutdownGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareShutdownGuest(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareStatus(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareWaitForIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareWaitForIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareWaitForIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareWaitForIP(ctx, req.(*WaitForIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareWaitForToolsRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForToolsRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareWaitForToolsRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareWaitForToolsRunning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareWaitForToolsRunning(ctx, req.(*WaitForToolsRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareSetAutoStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareSetAutoStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareSetAutoStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareSetAutoStart(ctx, req.(*AutoStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareVirtualMachineByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareVirtualMachineByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareVirtualMachineByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareVirtualMachineByName(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareVirtualMachineByUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareVirtualMachineByUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareVirtualMachineByUUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareVirtualMachineByUUID(ctx, req.(*VirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareListVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareListVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareListVirtualMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareListVirtualMachines(ctx, req.(*VirtualMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_VMWareListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).VMWareListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_VMWareListNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).VMWareListNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostListInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostListInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostListInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostListInstance(ctx, req.(*HostInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostStartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostStartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostStartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostStartInstance(ctx, req.(*HostInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostStopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostStopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostStopInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostStopInstance(ctx, req.(*HostInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostDeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostDeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostDeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostDeleteInstance(ctx, req.(*HostInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostInfoInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostInfoInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostInfoInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostInfoInstance(ctx, req.(*HostInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DesktopAutoscalerService_HostCreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostCreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DesktopAutoscalerServiceServer).HostCreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DesktopAutoscalerService_HostCreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DesktopAutoscalerServiceServer).HostCreateInstance(ctx, req.(*HostCreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DesktopAutoscalerService_ServiceDesc is the grpc.ServiceDesc for DesktopAutoscalerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DesktopAutoscalerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DesktopAutoscalerService",
	HandlerType: (*DesktopAutoscalerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VMWareCreate",
			Handler:    _DesktopAutoscalerService_VMWareCreate_Handler,
		},
		{
			MethodName: "VMWareDelete",
			Handler:    _DesktopAutoscalerService_VMWareDelete_Handler,
		},
		{
			MethodName: "VMWarePowerOn",
			Handler:    _DesktopAutoscalerService_VMWarePowerOn_Handler,
		},
		{
			MethodName: "VMWarePowerOff",
			Handler:    _DesktopAutoscalerService_VMWarePowerOff_Handler,
		},
		{
			MethodName: "VMWarePowerState",
			Handler:    _DesktopAutoscalerService_VMWarePowerState_Handler,
		},
		{
			MethodName: "VMWareShutdownGuest",
			Handler:    _DesktopAutoscalerService_VMWareShutdownGuest_Handler,
		},
		{
			MethodName: "VMWareStatus",
			Handler:    _DesktopAutoscalerService_VMWareStatus_Handler,
		},
		{
			MethodName: "VMWareWaitForIP",
			Handler:    _DesktopAutoscalerService_VMWareWaitForIP_Handler,
		},
		{
			MethodName: "VMWareWaitForToolsRunning",
			Handler:    _DesktopAutoscalerService_VMWareWaitForToolsRunning_Handler,
		},
		{
			MethodName: "VMWareSetAutoStart",
			Handler:    _DesktopAutoscalerService_VMWareSetAutoStart_Handler,
		},
		{
			MethodName: "VMWareVirtualMachineByName",
			Handler:    _DesktopAutoscalerService_VMWareVirtualMachineByName_Handler,
		},
		{
			MethodName: "VMWareVirtualMachineByUUID",
			Handler:    _DesktopAutoscalerService_VMWareVirtualMachineByUUID_Handler,
		},
		{
			MethodName: "VMWareListVirtualMachines",
			Handler:    _DesktopAutoscalerService_VMWareListVirtualMachines_Handler,
		},
		{
			MethodName: "VMWareListNetwork",
			Handler:    _DesktopAutoscalerService_VMWareListNetwork_Handler,
		},
		{
			MethodName: "HostListInstance",
			Handler:    _DesktopAutoscalerService_HostListInstance_Handler,
		},
		{
			MethodName: "HostStartInstance",
			Handler:    _DesktopAutoscalerService_HostStartInstance_Handler,
		},
		{
			MethodName: "HostStopInstance",
			Handler:    _DesktopAutoscalerService_HostStopInstance_Handler,
		},
		{
			MethodName: "HostDeleteInstance",
			Handler:    _DesktopAutoscalerService_HostDeleteInstance_Handler,
		},
		{
			MethodName: "HostInfoInstance",
			Handler:    _DesktopAutoscalerService_HostInfoInstance_Handler,
		},
		{
			MethodName: "HostCreateInstance",
			Handler:    _DesktopAutoscalerService_HostCreateInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
